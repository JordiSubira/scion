// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/proto/daemon (interfaces: DaemonServiceServer)

// Package mock_daemon is a generated GoMock package.
package mock_daemon

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	daemon "github.com/scionproto/scion/go/pkg/proto/daemon"
	reflect "reflect"
)

// MockDaemonServiceServer is a mock of DaemonServiceServer interface
type MockDaemonServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDaemonServiceServerMockRecorder
}

// MockDaemonServiceServerMockRecorder is the mock recorder for MockDaemonServiceServer
type MockDaemonServiceServerMockRecorder struct {
	mock *MockDaemonServiceServer
}

// NewMockDaemonServiceServer creates a new mock instance
func NewMockDaemonServiceServer(ctrl *gomock.Controller) *MockDaemonServiceServer {
	mock := &MockDaemonServiceServer{ctrl: ctrl}
	mock.recorder = &MockDaemonServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDaemonServiceServer) EXPECT() *MockDaemonServiceServerMockRecorder {
	return m.recorder
}

// AS mocks base method
func (m *MockDaemonServiceServer) AS(arg0 context.Context, arg1 *daemon.ASRequest) (*daemon.ASResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AS", arg0, arg1)
	ret0, _ := ret[0].(*daemon.ASResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AS indicates an expected call of AS
func (mr *MockDaemonServiceServerMockRecorder) AS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AS", reflect.TypeOf((*MockDaemonServiceServer)(nil).AS), arg0, arg1)
}

// DRKeyLvl2 mocks base method
func (m *MockDaemonServiceServer) DRKeyLvl2(arg0 context.Context, arg1 *daemon.DRKeyLvl2Request) (*daemon.DRKeyLvl2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DRKeyLvl2", arg0, arg1)
	ret0, _ := ret[0].(*daemon.DRKeyLvl2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DRKeyLvl2 indicates an expected call of DRKeyLvl2
func (mr *MockDaemonServiceServerMockRecorder) DRKeyLvl2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DRKeyLvl2", reflect.TypeOf((*MockDaemonServiceServer)(nil).DRKeyLvl2), arg0, arg1)
}

// Interfaces mocks base method
func (m *MockDaemonServiceServer) Interfaces(arg0 context.Context, arg1 *daemon.InterfacesRequest) (*daemon.InterfacesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Interfaces", arg0, arg1)
	ret0, _ := ret[0].(*daemon.InterfacesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Interfaces indicates an expected call of Interfaces
func (mr *MockDaemonServiceServerMockRecorder) Interfaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Interfaces", reflect.TypeOf((*MockDaemonServiceServer)(nil).Interfaces), arg0, arg1)
}

// NotifyInterfaceDown mocks base method
func (m *MockDaemonServiceServer) NotifyInterfaceDown(arg0 context.Context, arg1 *daemon.NotifyInterfaceDownRequest) (*daemon.NotifyInterfaceDownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyInterfaceDown", arg0, arg1)
	ret0, _ := ret[0].(*daemon.NotifyInterfaceDownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyInterfaceDown indicates an expected call of NotifyInterfaceDown
func (mr *MockDaemonServiceServerMockRecorder) NotifyInterfaceDown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyInterfaceDown", reflect.TypeOf((*MockDaemonServiceServer)(nil).NotifyInterfaceDown), arg0, arg1)
}

// Paths mocks base method
func (m *MockDaemonServiceServer) Paths(arg0 context.Context, arg1 *daemon.PathsRequest) (*daemon.PathsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paths", arg0, arg1)
	ret0, _ := ret[0].(*daemon.PathsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paths indicates an expected call of Paths
func (mr *MockDaemonServiceServerMockRecorder) Paths(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockDaemonServiceServer)(nil).Paths), arg0, arg1)
}

// Services mocks base method
func (m *MockDaemonServiceServer) Services(arg0 context.Context, arg1 *daemon.ServicesRequest) (*daemon.ServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", arg0, arg1)
	ret0, _ := ret[0].(*daemon.ServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Services indicates an expected call of Services
func (mr *MockDaemonServiceServerMockRecorder) Services(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockDaemonServiceServer)(nil).Services), arg0, arg1)
}
